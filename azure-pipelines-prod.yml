# .NET Core Function App to Windows on Azure
# Build a .NET Core function app and deploy it to Azure as a Windows function App.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/en-us/azure/devops/pipelines/languages/dotnet-core

trigger:
- main
- releases/*

variables:  
  - group: Register-API-Dev-Variables  
  # Agent VM image name  
  - name: vmImageName    
    value: 'windows-2019'  
  # Working Directory  
  - name: workingDirectory    
    value: 'directory'

stages:
# Static Analysis stage: This stage runs static code analysis using SonarQube and audits dependencies for vulnerabilities.
- stage: StaticAnalysis  
  displayName: "Run Static Analysis"  
  condition: always()  
  jobs:
    # SonarQube job: This job performs static code analysis using SonarQube.
    - job: SonarQube    
      condition: and(succeeded(), startsWith(variables['build.sourceBranch'], 'refs/heads/main'))    
      displayName: 'Build and SonarQube Analysis'    
      pool:      
        vmImage: ubuntu-latest    
      steps:      
        - task: UseDotNet@2        
          displayName: 'Install .NET Core SDK'        
          inputs:          
            version: 8.x          
            performMultiLevelLookup: true          
            includePreviewVersions: true      
        - task: DotNetCoreCLI@2        
          displayName: "Restore task"        
          inputs:          
            command: 'restore'          
            projects: '**/*.csproj'          
            feedsToUse: 'select'          
            vstsFeed: 'b8db0229-c220-4583-b1d9-1111e482a1ce'      
        - task: SonarQubePrepare@5        
          displayName: "Prepare SonarQube Analysis"        
          inputs:          
            SonarQube: 'ofqual-register-api-service-connection'          
            scannerMode: 'MSBuild'          
            projectKey: $(SonarqubeKey)          
            projectName: 'Register API'
        - powershell: |
            if ($env:BUILD_REASON -eq "PullRequest") {
                $params = "$env:SONARQUBE_SCANNER_PARAMS" -replace '"sonar.pullrequest.*":"[\w,/,-]*"\,?'
            } else {
                $params = "$env:SONARQUBE_SCANNER_PARAMS" -replace '"sonar.branch.name":"[\w,/,-]*"\,?'
            }
            Write-Host "##vso[task.setvariable variable=SONARQUBE_SCANNER_PARAMS]$params"      
        - task: DotNetCoreCLI@2        
          displayName: "Build task"        
          inputs:          
            command: "build"          
            projects: "**/*.csproj"
            arguments: "--configuration $(BuildConfiguration)"          
        # Run Code Analysis task      
        - task: SonarQubeAnalyze@5        
          displayName: "SonarQube Analysis"      
        # Publish Quality Gate Result task      
        - task: SonarQubePublish@5        
          displayName: "Publish Results"        
          inputs:          
            pollingTimeoutSec: '300'

    # Snyk job: This job performs static code and app analysis using Snyk tasks.
    - job: Snyk
      displayName: 'Build and Snyk Analysis'
      pool:      
        vmImage: ubuntu-latest
      steps: 
        - task: UseDotNet@2        
          displayName: 'Install .NET Core SDK'        
          inputs:          
            version: 8.x          
            performMultiLevelLookup: true          
            includePreviewVersions: true      
        - task: DotNetCoreCLI@2        
          displayName: "Restore task"        
          inputs:          
            command: 'restore'          
            projects: '**/*.csproj'          
            feedsToUse: 'select'          
            vstsFeed: 'b8db0229-c220-4583-b1d9-1111e482a1ce'      
        - task: DotNetCoreCLI@2        
          displayName: "Build task"        
          inputs:          
            command: "build"          
            projects: "**/*.csproj"
            arguments: "--configuration $(BuildConfiguration)"
        - task: SnykSecurityScan@1
          inputs:
            serviceConnectionEndpoint: 'SNYK-general-connection'
            testType: 'code'
            failOnIssues: true
    # Audit job: This job audits dependencies for vulnerabilities.  
    - job: Audit    
      displayName: 'Audit Dependencies'    
      pool:      
        vmImage: ubuntu-latest    
      steps:      
        - task: DotNetCoreCLI@2        
          inputs:          
            command: 'restore'          
            projects: '**/*.csproj'        
          displayName: 'Restore Nuget Packages'      
        - task: Bash@3        
          displayName: Check NuGet vulnerabilities        
          inputs:          
            targetType: 'inline'          
            script: |            
              dotnet list package --vulnerable --include-transitive 2>&1 | tee build.log
              echo "Analyse dotnet list package command log output..."
              if grep -q -i "critical\|high" build.log; then
                  echo "Must fix security vulnerabilities found on the log output"
                  exit 1
              else
                  echo "No critical or high severity vulnerabilities found."
                  exit 0
              fi
# This stage runs the test suite using NUnit using the DotNetCoreCLI task. 
- stage: RunTests
  displayName: "Run Tests"
  jobs:
    # Test job: This job runs the test suite using NUnit.
    - job: UnitTests
      condition: always()
      displayName: Run Tests
      pool:
        vmImage: $(vmImageName)
      steps:
        # Install .NET Core SDK
        - task: UseDotNet@2
          inputs:
            version: '8.x'
        # Run NUnit tests
        - task: DotNetCoreCLI@2
          displayName: 'NUnit Tests'
          inputs:
            command: test

# Build stage: This stage compiles the .NET project, archives the build output, and publishes the artifact.
- stage: BuildAndPackage
  dependsOn: RunTests
  displayName: "Build and package"
  jobs:
    - job: Build
      displayName: Build
      pool:
        vmImage: $(vmImageName)
      steps:
        # Install .NET Core SDK
        - task: UseDotNet@2
          inputs:
            version: '8.x'

        # Restore NuGet packages using a specific Azure Artifacts feed.
        - task: DotNetCoreCLI@2
          displayName: 'Restore task'
          inputs:
            command: 'restore'
            projects: '**/*.csproj'
            feedsToUse: 'select'
            vstsFeed: 'b8db0229-c220-4583-b1d9-1111e482a1ce'

        # Build the project and output to the publish directory
        - task: DotNetCoreCLI@2
          displayName: Build
          inputs:
            command: 'build'
            projects: '**/*.csproj'
            arguments: --output $(System.DefaultWorkingDirectory)/publish_output --configuration Release

        # Archive the build output and publish the artifact
        - task: ArchiveFiles@2
          displayName: 'Archive files'
          inputs:
            rootFolderOrFile: '$(System.DefaultWorkingDirectory)/publish_output'
            includeRootFolder: false
            archiveType: zip
            archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
            replaceExistingArchive: true
        - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
          artifact: drop
